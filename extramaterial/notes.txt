
tes:
Alla script börjar med #!/bin/bash
Ändra permission chmod 754 fil
För att bara göra executable chmod +x filnamn
http://www.grymoire.com/Unix/

Shell
Filename Expansion with directories	
Pattern			Matches:
*			All non-invisible files
abc/*			All non-invisible files in directory abc
abc/.*			All invisible files in directory abc
*/*			All non-invisible files in all subdirectories below
*/.*			All invisible files in all subdirectories below

Regular exp:
Pattern			Matches:
^A			"A" at the beginning of a line
A$			"A" at the end of a line
A^			"A^" anywhere on a line
$A			"$A" anywhere on a line
^^			"^" at the beginning of a line
$$			"$" at the end of a line

Regular Expression	Matches:
[]			The characters "[]"
[0]			The character "0"
[0-9]			Any number
[^0-9]			Any character other than a number
[-0-9]			Any number or a "-"
[0-9-]			Any number or a "-"
[^-0-9]			Any character except a number or a "-"
[]0-9]			Any number or a "]"
[0-9]]			Any number followed by a "]"
[0-9-z]			Any number, or any character between "9" and "z".
[0-9\-a\]]		Any number, or	a "-", a "a", or a "]"

Regular Expression	Matches:
_	
*			Any line with an asterisk
\*			Any line with an asterisk
\\			Any line with a backslash
^*			Any line starting with an asterisk
^A*			Any line
^A\*			Any line starting with an "A*"
^AA*			Any line if it starts with one "A"
^AA*B			Any line with one or more "A"'s followed by a "B"
^A\{4,8\}B		Any line starting with 4, 5, 6, 7 or 8 "A"'s followed by a "B"
^A\{4,\}B		Any line starting with 4 or more "A"'s followed by a "B"
^A\{4\}B		Any line starting with "AAAAB"
\{4,8\}			Any line with "{4,8}"
A{4,8}			Any line with "A{4,8}"

The pattern to search for the word "the" would be "\<[tT]he\>". 
The character before the "t" must be either a new line character, or anything except a letter, number, or underscore. 
The character after the "e" must also be a character other than a number, letter, or underscore or it could be the end of line character.
 
AWK
Följer formen 
Pattern {action}

Ett program kan se ut såhär

BEGIN  { print "START" }
             { print                 }
END      { print "END"    }

	
Man kan skapa ett awk script genom att skapa en fil awk_example.awk
#!/bin/awk -f
BEGIN { print "File\tOwner" }
{ print $8, "\t", $3}
END { print " - DONE -" }

Det blir då som ett nytt linux kommando.
Så här ser ett script ut som skriver ut ett specifikt kolumnnummer.
#!/bin/sh	
Column=${1:-1}	#initiera en variabel med första argumentet när scriptet kallas. Defaultvärde 1.
Awk '{print $'$Column'}'	#Kalla på awk och skriv ut kolumn Column. Notera fnuttarna


Awk har samma aritmetiska operatorer som c.


Lecture 1:
Date					Outputs the current date
Cal 1 2 1999				Shows  the calendar (day ) of 1 februari 1999
mv file newfile				Renames the file to newfile
mv file folder				Moves the file to the folder
cp file folder				Copy the file to folder
cp file file2				Copy the file to file2
wget html adress			Downloads the specified file
find . -type f -exec cat {} \; > file	Finds all files in subfolders and outputs their content to the file new
sort -h file > file_sorted	Sorts content in file on human readable numbers (-h) and prints it to file sorted.

Find					Use to find files or directories. Will search for files. Find <path> <pattern>
Locate					Use to find indexed file. Does not work on directories.


Repetition contructs
	•  for… do …done
		○ For NAME [in LIST] ; fo COMMANDS; done
		○ NAME is the name of the variable that contains the successive elemetns from the list
		○ LIST is the list of alternative; can be specified literally or generated with brace expression, filename expansion, command substituition etc.
	• While.. Do … done
		○ Whie CONTROL-COMMAND; do CONSEQUENT-COMMANDS; done
		○ CONTROL-COMMAND can be any command.
	• Until… do…. Done
	• Select… do… done
		○ This is almost the same as a for loop, but the list alternatives are printered as numbered alternatives
		○ Seöect WORD [in LIST]; do REPECTIVE-COMMAND; done
		○ Is used to generate menues.
	• Break/continue
		○ Break exits the repetive construct before its normal ending
		○ Continue steps to the next iterartion in the repetitive construct

Positional arguments in repetitive constructs
	• if LIST is not specified it is by default the list of positional arguments $@
	• Shift N builtin command removes first N positional arguments

Functions
	• Functions can be used to group commands
	• Function FUNCTIONNAME{COMMANDS;}
	• Or FUNCTIONAME () { COMMANDS;}
		○ Note the spaces around the curly braces
	• Functions in bash do not have a return value

Variables, positional parameters in function, and exit status
	• Local variablename: this creates a variable local to the function
	• The positional parameters $1, $2 are the arguments to function (not arguments to the script containing the script)
	• The function can be quit with return
	• Return x can also be used to return an exit status to the calling process.

Constants
	• Constants = read-only variables
	• Readonly OPTION VARIABLE(s)
Arrays
	• You can use arrays in Bash; indices are zero based. ARRAY[INDEXNR]


	
